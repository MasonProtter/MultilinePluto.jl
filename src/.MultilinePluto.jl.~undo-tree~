(undo-tree-save-format-version . 1)
"2710610382c964127bae3c53dbf0459ffdcae2e7"
[nil nil nil nil (26523 48113 882182 105000) 0 nil]
([nil nil ((#("
greet() = print(\"Hello World!\")" 0 1 (fontified t) 1 6 (face font-lock-function-name-face fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t) 8 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 31 (face font-lock-string-face fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t)) . 23) (undo-tree-id6 . -32) 55 (t 26523 48032 226839 71000)) nil (26523 48113 882181 333000) 0 nil])
([nil nil ((23 . 25)) nil (26523 48113 882180 322000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -23) (undo-tree-id4 . -1) (#("u" 0 1 (fontified t)) . -24) (undo-tree-id5 . -1) 25) nil (26523 48113 882179 640000) 0 nil])
([nil nil ((23 . 24)) nil (26523 48113 882177 947000) 0 nil])
([nil nil ((24 . 29)) nil (26523 48113 882177 586000) 0 nil])
([nil nil ((29 . 41)) nil (26523 48113 882177 236000) 0 nil])
([nil nil ((41 . 43) (#("(" 0 1 (face font-lock-function-name-face fontified nil)) . -41) (41 . 42)) nil (26523 48113 882176 554000) 0 nil])
([nil nil ((42 . 43) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -42) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 43) (42 . 43)) nil (26523 48113 882175 733000) 0 nil])
([nil nil ((45 . 49) (#("    " 0 4 (fontified nil)) . 44) (undo-tree-id3 . -4) (43 . 49)) nil (26523 48113 882174 811000) 0 nil])
([nil nil ((49 . 53)) nil (26523 48113 882173 489000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -52) (undo-tree-id2 . -1) 53) nil (26523 48113 882172 897000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -45) 52) nil (26523 48113 882171 565000) 0 nil])
([nil nil ((44 . 48)) nil (26523 48113 882170 964000) 0 nil])
([nil nil ((48 . 59)) nil (26523 48113 882170 643000) 0 nil])
([nil nil ((23 . 25)) nil (26523 48113 882170 132000) 0 nil])
([nil nil ((24 . 31)) nil (26523 48113 882169 772000) 0 nil])
([nil nil ((31 . 35)) nil (26523 48113 882169 301000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -33) (undo-tree-id0 . -1) (#("t" 0 1 (fontified t)) . -34) (undo-tree-id1 . -1) 35) nil (26523 48113 882168 8000) 0 nil])
([nil nil ((33 . 35)) nil (26523 48113 882152 679000) 0 nil])
([nil nil ((35 . 36)) nil (26523 48113 882151 707000) 0 nil])
([nil nil ((36 . 48)) nil (26523 48113 882148 161000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -84) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 85 (t 26523 48113 881797 491000)) nil (26523 48199 817110 705000) 0 nil])
([nil nil ((84 . 91)) nil (26523 48199 817108 922000) 0 nil])
([nil nil ((93 . 101) (#("        " 0 8 (fontified nil)) . 92) (undo-tree-id23 . -8) (91 . 101)) nil (26523 48199 817108 391000) 0 nil])
([nil nil ((101 . 105)) nil (26523 48199 817107 379000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -104) (undo-tree-id22 . -1) 105) nil (26523 48199 817106 888000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -97) 104) nil (26523 48199 817105 816000) 0 nil])
([nil nil ((92 . 100)) nil (26523 48199 817105 325000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1579 . 1580) (nil fontified nil 1577 . 1580) (nil fontified nil 1576 . 1577) (nil fontified nil 1575 . 1576) (nil fontified nil 1574 . 1575) (nil fontified nil 1573 . 1574) (nil fontified nil 1572 . 1573) (nil fontified nil 1571 . 1572) (nil fontified nil 1556 . 1571) (nil fontified nil 1555 . 1556) (nil fontified nil 1538 . 1555) (nil fontified nil 1537 . 1538) (nil fontified nil 1536 . 1537) (nil fontified nil 1535 . 1536) (nil fontified nil 1503 . 1535) (nil fontified nil 1502 . 1503) (nil fontified nil 1494 . 1502) (nil fontified nil 1491 . 1494) (nil fontified nil 1489 . 1491) (nil fontified nil 1483 . 1489) (nil fontified nil 1480 . 1483) (nil fontified nil 1475 . 1480) (nil fontified nil 1474 . 1475) (nil fontified nil 1469 . 1474) (nil fontified nil 1468 . 1469) (nil fontified nil 1467 . 1468) (nil fontified nil 1459 . 1467) (nil fontified nil 1458 . 1459) (nil fontified nil 1449 . 1458) (nil fontified nil 1448 . 1449) (nil fontified nil 1432 . 1448) (nil fontified nil 1423 . 1432) (nil fontified nil 1422 . 1423) (nil fontified nil 1409 . 1422) (nil fontified nil 1405 . 1409) (nil fontified nil 1388 . 1405) (nil fontified nil 1387 . 1388) (nil fontified nil 1384 . 1387) (nil fontified nil 1383 . 1384) (nil fontified nil 1347 . 1383) (nil fontified nil 1345 . 1347) (nil fontified nil 1328 . 1345) (nil fontified nil 1325 . 1328) (nil fontified nil 1323 . 1325) (nil fontified nil 1317 . 1323) (nil fontified nil 1314 . 1317) (nil fontified nil 1309 . 1314) (nil fontified nil 1308 . 1309) (nil fontified nil 1295 . 1308) (nil fontified nil 1294 . 1295) (nil fontified nil 1244 . 1294) (nil fontified nil 1242 . 1244) (nil fontified nil 1236 . 1242) (nil fontified nil 1235 . 1236) (nil fontified nil 1221 . 1235) (nil fontified nil 1220 . 1221) (nil fontified nil 1191 . 1220) (nil fontified nil 1188 . 1191) (nil fontified nil 1186 . 1188) (nil fontified nil 1180 . 1186) (nil fontified nil 1177 . 1180) (nil fontified nil 1172 . 1177) (nil fontified nil 1169 . 1172) (nil fontified nil 1160 . 1169) (nil fontified nil 1159 . 1160) (nil fontified nil 1071 . 1159) (nil fontified nil 1069 . 1071) (nil fontified nil 1063 . 1069) (nil fontified nil 1062 . 1063) (nil fontified nil 1045 . 1062) (nil fontified nil 1041 . 1045) (nil fontified nil 1013 . 1041) (nil fontified nil 958 . 1013) (nil fontified nil 956 . 958) (nil fontified nil 943 . 956) (nil fontified nil 936 . 943) (nil fontified nil 923 . 936) (nil fontified nil 921 . 923) (nil fontified nil 911 . 921) (nil fontified nil 910 . 911) (nil fontified nil 905 . 910) (nil fontified nil 877 . 905) (nil fontified nil 876 . 877) (nil fontified nil 836 . 876) (nil fontified nil 835 . 836) (nil fontified nil 830 . 835) (nil fontified nil 810 . 830) (nil fontified nil 809 . 810) (nil fontified nil 770 . 809) (nil fontified nil 689 . 770) (nil fontified nil 688 . 689) (nil fontified nil 682 . 688) (nil fontified nil 681 . 682) (nil fontified nil 680 . 681) (nil fontified nil 679 . 680) (nil fontified nil 601 . 679) (nil fontified nil 599 . 601) (nil fontified nil 590 . 599) (nil fontified nil 586 . 590) (nil fontified nil 582 . 586) (nil fontified nil 581 . 582) (nil fontified nil 578 . 581) (nil fontified nil 554 . 578) (nil fontified nil 550 . 554) (nil fontified nil 541 . 550) (nil fontified nil 538 . 541) (nil fontified nil 506 . 538) (nil fontified nil 502 . 506) (nil fontified nil 490 . 502) (nil fontified nil 489 . 490) (nil fontified nil 471 . 489) (nil fontified nil 466 . 471) (nil fontified nil 465 . 466) (nil fontified nil 456 . 465) (nil fontified nil 455 . 456) (nil fontified nil 435 . 455) (nil fontified nil 434 . 435) (nil fontified nil 428 . 434) (nil fontified nil 427 . 428) (nil fontified nil 421 . 427) (nil fontified nil 419 . 421) (nil fontified nil 407 . 419) (nil fontified nil 383 . 407) (nil fontified nil 369 . 383) (nil fontified nil 367 . 369) (nil fontified nil 354 . 367) (nil fontified nil 353 . 354) (nil fontified nil 344 . 353) (nil fontified nil 340 . 344) (nil fontified nil 339 . 340) (nil fontified nil 327 . 339) (nil fontified nil 325 . 327) (nil fontified nil 317 . 325) (nil fontified nil 316 . 317) (nil fontified nil 315 . 316) (nil fontified nil 287 . 315) (nil fontified nil 286 . 287) (nil fontified nil 252 . 286) (nil fontified nil 251 . 252) (nil fontified nil 250 . 251) (nil fontified nil 236 . 250) (nil fontified nil 235 . 236) (nil fontified nil 181 . 235) (nil fontified nil 179 . 181) (nil fontified nil 169 . 179) (nil fontified nil 166 . 169) (nil fontified nil 164 . 166) (nil fontified nil 159 . 164) (nil fontified nil 155 . 159) (nil fontified nil 153 . 155) (nil fontified nil 152 . 153) (nil fontified nil 148 . 152) (nil fontified nil 140 . 148) (nil fontified nil 132 . 140) (nil fontified nil 122 . 132) (nil fontified nil 121 . 122) (nil fontified nil 109 . 121) (nil fontified nil 108 . 109) (nil fontified nil 100 . 108) (100 . 1580)) nil (26523 48199 817101 628000) 0 nil])
([nil nil ((1881 . 1889) (1790 . 1802) (#("    " 0 4 (fontified t)) . 1790) (1773 . 1785) (#("    " 0 4 (fontified t)) . 1773) (1756 . 1768) (#("    " 0 4 (fontified t)) . 1756) (1682 . 1698) (#("        " 0 8 (fontified t)) . 1682) (1665 . 1677) (#("    " 0 4 (fontified t)) . 1665) (1645 . 1661) (#("        " 0 8 (fontified t)) . 1645) (1576 . 1588) (#("    " 0 4 (fontified t)) . 1576) (1559 . 1571) (#("    " 0 4 (fontified t)) . 1559) (1542 . 1554) (#("    " 0 4 (fontified t)) . 1542) (1490 . 1506) (#("        " 0 8 (fontified t)) . 1490) (1454 . 1466) (#("    " 0 4 (fontified t)) . 1454) (1399 . 1411) (#("    " 0 4 (fontified t)) . 1399) (1382 . 1394) (#("    " 0 4 (fontified t)) . 1382) (1365 . 1377) (#("    " 0 4 (fontified t)) . 1365) (1345 . 1361) (#("        " 0 8 (fontified t)) . 1345) (1222 . 1242) (#("            " 0 12 (fontified t)) . 1222) (1201 . 1217) (#("        " 0 8 (fontified t)) . 1201) (1173 . 1193) (#("            " 0 12 (fontified t)) . 1173) (1096 . 1116) (#("            " 0 12 (fontified t)) . 1096) (1057 . 1073) (#("        " 0 8 (fontified t)) . 1057) (973 . 989) (#("        " 0 8 (fontified t)) . 973) (898 . 914) (#("        " 0 8 (fontified t)) . 898) (711 . 727) (#("        " 0 8 (fontified t)) . 711) (694 . 706) (#("    " 0 4 (fontified t)) . 694) (674 . 690) (#("        " 0 8 (fontified t)) . 674) (651 . 671) (#("            " 0 12 (fontified t)) . 651) (630 . 646) (#("        " 0 8 (fontified t)) . 630) (606 . 626) (#("            " 0 12 (fontified t)) . 606) (579 . 603) (#("                " 0 16 (fontified t)) . 579) (554 . 574) (#("            " 0 12 (fontified t)) . 554) (527 . 551) (#("                " 0 16 (fontified t)) . 527) (455 . 475) (#("            " 0 12 (fontified t)) . 455) (395 . 415) (#("            " 0 12 (fontified t)) . 395) (349 . 365) (#("        " 0 8 (fontified t)) . 349) (276 . 292) (#("        " 0 8 (fontified t)) . 276) (218 . 234) (#("        " 0 8 (fontified t)) . 218) (177 . 189) (#("    " 0 4 (fontified t)) . 177) (160 . 172) (#("    " 0 4 (fontified t)) . 160) 70) nil (26523 48199 817081 269000) 0 nil])
([nil nil ((91 . 100)) nil (26523 48199 817072 773000) 0 nil])
([nil nil ((100 . 106)) nil (26523 48199 817072 222000) 0 nil])
([nil nil ((#("Repl" 0 4 (face font-lock-comment-face fontified t)) . 102) (undo-tree-id21 . -4) 106) nil (26523 48199 817071 431000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -94) (undo-tree-id13 . -1) (#(" " 0 1 (fontified t)) . -95) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t)) . -96) (undo-tree-id15 . -1) (#(" " 0 1 (fontified t)) . -97) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -98) (undo-tree-id17 . -1) (#(" " 0 1 (fontified t)) . -99) (undo-tree-id18 . -1) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -100) (undo-tree-id19 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -101) (undo-tree-id20 . -1) 102) nil (26523 48199 817069 36000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -91) (undo-tree-id10 . -1) (#(" " 0 1 (fontified t)) . -92) (undo-tree-id11 . -1) (#(" " 0 1 (fontified t)) . -93) (undo-tree-id12 . -1) 94) nil (26523 48199 817063 736000) 0 nil])
([nil nil ((69 . 74)) nil (26523 48199 817060 460000) 0 nil])
([nil nil ((74 . 89)) nil (26523 48199 817060 59000) 0 nil])
([nil nil ((89 . 90)) nil (26523 48199 817059 518000) 0 nil])
([nil nil ((93 . 105) (92 . 94) (#("`" 0 1 (face font-lock-comment-face fontified nil)) . -92) (90 . 93)) nil (26523 48199 817058 907000) 0 nil])
([nil nil ((106 . 127)) nil (26523 48199 817058 85000) 0 nil])
([nil nil ((127 . 148)) nil (26523 48199 817057 665000) 0 nil])
([nil nil ((148 . 152)) nil (26523 48199 817057 224000) 0 nil])
([nil nil ((148 . 153) (#("erro" 0 4 (face font-lock-comment-face fontified t)) . -148) (undo-tree-id9 . -4) 152) nil (26523 48199 817056 542000) 0 nil])
([nil nil ((153 . 158)) nil (26523 48199 817055 110000) 0 nil])
([nil nil ((158 . 159)) nil (26523 48199 817054 589000) 0 nil])
([nil nil ((159 . 163)) nil (26523 48199 817054 128000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-comment-face fontified t)) . -161) (undo-tree-id7 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -162) (undo-tree-id8 . -1) 163) nil (26523 48199 817052 355000) 0 nil])
([nil nil ((161 . 182)) nil (26523 48199 817043 868000) 0 nil])
([nil nil ((182 . 202)) nil (26523 48199 817040 532000) 0 nil])
([nil nil ((#("            # 1.
            raw = if can_insert_filename
                filename = pluto_filename(notebook, cell)
                ex = Base.parse_input_line(cell.code, filename=filename)
                if Meta.isexpr(ex, :toplevel)
                    # if there is more than one expression:
                    if count(a -> !(a isa LineNumberNode), ex.args) > 1
                        ex
                    else
                        ex
                    end
                else
                    ex
                end
            else
                # Meta.parse returns the \"extra token...\" like we want, but also in cases like \"\\n\\nx = 1\\n# comment\", so we need to do the multiple expressions check ourselves after all
                parsed1, next_ind1 = Meta.parse(cell.code, 1, raise=false)
                parsed2, next_ind2 = Meta.parse(cell.code, next_ind1, raise=false)

                if parsed2 === nothing
                    # only whitespace or comments after the first expression
                    parsed1
                else
                    Expr(:error, \"extra token after end of expression\\n\\nBoundaries: $(expression_boundaries(cell.code))\")
                end
            end" 0 12 (fontified t) 12 14 (face font-lock-comment-delimiter-face fontified t) 14 17 (face font-lock-comment-face fontified t) 17 29 (fontified t) 29 35 (fontified t) 35 37 (face font-lock-keyword-face fontified t) 37 74 (fontified t) 74 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-1-face) fontified t) 100 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-1-face) fontified t) 115 132 (fontified t) 132 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-1-face) fontified t) 159 187 (fontified t) 187 188 (face (rainbow-delimiters-depth-1-face) fontified t) 188 205 (fontified t) 205 207 (face font-lock-keyword-face fontified t) 207 219 (fontified t) 219 220 (face (rainbow-delimiters-depth-1-face) fontified t) 220 224 (fontified t) 224 233 (face julia-quoted-symbol-face fontified t) 233 234 (face (rainbow-delimiters-depth-1-face) fontified t) 234 255 (fontified t) 255 257 (face font-lock-comment-delimiter-face fontified t) 257 271 (face font-lock-comment-face fontified t) 271 295 (face font-lock-comment-face fontified t) 295 315 (fontified t) 315 317 (face font-lock-keyword-face fontified t) 317 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-1-face) fontified t) 324 330 (fontified t) 330 331 (face (rainbow-delimiters-depth-2-face) fontified t) 331 351 (fontified t) 351 352 (face (rainbow-delimiters-depth-2-face) fontified t) 352 361 (fontified t) 361 362 (face (rainbow-delimiters-depth-1-face) fontified t) 362 391 (fontified t) 391 393 (fontified t) 393 414 (fontified t) 414 418 (face font-lock-keyword-face fontified t) 418 443 (fontified t) 443 466 (fontified t) 466 469 (face font-lock-keyword-face fontified t) 469 486 (fontified t) 486 490 (face font-lock-keyword-face fontified t) 490 511 (fontified t) 511 530 (fontified t) 530 533 (face font-lock-keyword-face fontified t) 533 546 (fontified t) 546 550 (face font-lock-keyword-face fontified t) 550 567 (fontified t) 567 569 (face font-lock-comment-delimiter-face fontified t) 569 647 (face font-lock-comment-face fontified t) 647 648 (face font-lock-comment-face syntax-table (1) fontified t) 648 649 (face font-lock-comment-face fontified t) 649 650 (face font-lock-comment-face syntax-table (1) fontified t) 650 656 (face font-lock-comment-face fontified t) 656 657 (face font-lock-comment-face syntax-table (1) fontified t) 657 738 (face font-lock-comment-face fontified t) 738 754 (fontified t) 754 785 (fontified t) 785 786 (face (rainbow-delimiters-depth-1-face) fontified t) 786 806 (fontified t) 806 811 (face font-lock-constant-face fontified t) 811 812 (face (rainbow-delimiters-depth-1-face) fontified t) 812 829 (fontified t) 829 860 (fontified t) 860 861 (face (rainbow-delimiters-depth-1-face) fontified t) 861 889 (fontified t) 889 894 (face font-lock-constant-face fontified t) 894 895 (face (rainbow-delimiters-depth-1-face) fontified t) 895 896 (fontified t) 896 897 (fontified t) 897 913 (fontified t) 913 915 (face font-lock-keyword-face fontified t) 915 928 (fontified t) 928 935 (face font-lock-constant-face fontified t) 935 956 (fontified t) 956 958 (face font-lock-comment-delimiter-face fontified t) 958 1013 (face font-lock-comment-face fontified t) 1013 1033 (fontified t) 1033 1057 (fontified t) 1057 1061 (face font-lock-keyword-face fontified t) 1061 1082 (fontified t) 1082 1086 (fontified t) 1086 1087 (face (rainbow-delimiters-depth-1-face) fontified t) 1087 1093 (face julia-quoted-symbol-face fontified t) 1093 1095 (fontified t) 1095 1183 (face font-lock-string-face fontified t) 1183 1184 (face (rainbow-delimiters-depth-1-face) fontified t) 1184 1201 (fontified t) 1201 1204 (face font-lock-keyword-face fontified t) 1204 1217 (fontified t) 1217 1220 (face font-lock-keyword-face fontified t)) . 293) (undo-tree-id46 . -1220) (undo-tree-id47 . -1204) (undo-tree-id48 . -1204) (undo-tree-id49 . -1204) (undo-tree-id50 . -1204) (undo-tree-id51 . -1204) (undo-tree-id52 . -1204) (undo-tree-id53 . -1220) (undo-tree-id54 . -1220) (undo-tree-id55 . -1220) (undo-tree-id56 . -1220) (undo-tree-id57 . -1220) (t 26523 48199 820211 594000)) nil (26523 48208 178339 902000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -292) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("
" 0 1 (fontified t)) . -293) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 294) nil (26523 48208 178328 731000) 0 nil])
([nil nil ((224 . 233) (t 26523 48208 177047 494000)) nil (26523 48249 404920 100000) 0 nil])
([nil nil ((233 . 247)) nil (26523 48249 404919 419000) 0 nil])
([nil nil ((nil rear-nonsticky nil 311 . 312) (nil fontified nil 247 . 312) (247 . 312)) nil (26523 48249 404918 718000) 0 nil])
([nil nil ((312 . 321)) nil (26523 48249 404917 916000) 0 nil])
([nil nil ((321 . 322)) nil (26523 48249 404917 385000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -321) (undo-tree-id212 . -1) 322) nil (26523 48249 404916 573000) 0 nil])
([nil nil ((340 . 342) (#("`" 0 1 (face font-lock-comment-face fontified nil)) . -340) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (321 . 341)) nil (26523 48249 404915 241000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-comment-face fontified t)) . -336) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -337) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("p" 0 1 (face font-lock-comment-face fontified t)) . -338) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -339) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("`" 0 1 (face font-lock-comment-face fontified nil)) . -340) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("`" 0 1 (face font-lock-comment-face fontified t)) . 341) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1)) nil (26523 48249 404909 500000) 0 nil])
([nil nil ((336 . 344)) nil (26523 48249 404750 879000) 0 nil])
([nil nil ((347 . 359) (346 . 348) (#("`" 0 1 (face font-lock-comment-face fontified nil)) . -346) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (344 . 347)) nil (26523 48249 404749 527000) 0 nil])
([nil nil ((360 . 368)) nil (26523 48249 404737 554000) 0 nil])
([nil nil ((48 . 53) (t 26523 48249 404547 415000)) nil (26523 48285 808714 258000) 0 nil])
([nil nil ((#("run" 0 3 (fontified t)) . 50) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) 53 (t 26523 48285 811947 742000)) nil (26523 48287 545363 48000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -48) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#(" " 0 1 (fontified t)) . -49) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 50) nil (26523 48287 545357 859000) 0 nil])
([nil nil ((48 . 49) (t 26523 48287 548649 358000)) nil (26523 48302 286011 802000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -48) (undo-tree-id231 . -1) (undo-tree-id232 . -1) 49) nil (26523 48302 286011 51000) 0 nil])
([nil nil ((48 . 50)) nil (26523 48302 286009 678000) 0 nil])
([nil nil ((50 . 53)) nil (26523 48302 286009 137000) 0 nil])
([nil nil ((#("Plu" 0 3 (fontified t)) . -50) (undo-tree-id230 . -3) 53) nil (26523 48302 286008 406000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -48) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#(" " 0 1 (fontified t)) . -49) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 50) nil (26523 48302 286006 312000) 0 nil])
([nil nil ((35 . 47)) nil (26523 48302 285994 349000) 0 nil])
([nil nil ((60 . 65)) nil (26523 48302 285990 362000) 0 nil])
([nil nil ((#("run" 0 3 (fontified t)) . -62) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) 65 (t 26523 48302 288945 810000)) nil (26523 48619 92307 130000) 0 nil])
([nil nil ((#("Pluto, " 0 7 (fontified t)) . -55) (undo-tree-id233 . -5) (undo-tree-id234 . -7) (undo-tree-id235 . -7) (undo-tree-id236 . -7) (undo-tree-id237 . -7) (undo-tree-id238 . -7) (undo-tree-id239 . -7) (undo-tree-id240 . -7) (undo-tree-id241 . -7) (undo-tree-id242 . -7) 62) nil (26523 48619 92301 459000) 0 nil])
([nil nil ((55 . 58)) nil (26523 48619 92284 948000) 0 nil])
([nil nil ((#("run" 0 3 (fontified t)) . -44) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) 47 (t 26523 48619 95257 422000)) nil (26523 48651 810315 254000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -42) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) 44) nil (26523 48651 810310 976000) 0 nil])
([nil nil ((#("run" 0 3 (fontified t)) . -50) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) 53) nil (26523 48651 810298 492000) 0 nil])
([nil nil ((50 . 55)) nil (26523 48651 810283 774000) 0 nil])
([nil nil ((42 . 47) (t 26523 48651 812570 749000)) nil (26523 48667 334515 474000) 0 nil])
([nil nil ((450 . 462) (#("            " 0 12 (fontified nil)) . 449) (undo-tree-id289 . -12) (undo-tree-id290 . -12) (448 . 462) (t 26523 48667 336210 658000)) nil (26523 48808 627503 113000) 0 nil])
([nil nil ((449 . 461)) nil (26523 48808 627493 405000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1471 . 1472) (nil fontified nil 1469 . 1472) (nil fontified nil 1464 . 1469) (nil fontified nil 1461 . 1464) (nil fontified nil 1452 . 1461) (nil fontified nil 1451 . 1452) (nil fontified nil 1363 . 1451) (nil fontified nil 1361 . 1363) (nil fontified nil 1355 . 1361) (nil fontified nil 1354 . 1355) (nil fontified nil 1337 . 1354) (nil fontified nil 1333 . 1337) (nil fontified nil 1305 . 1333) (nil fontified nil 1250 . 1305) (nil fontified nil 1248 . 1250) (nil fontified nil 1235 . 1248) (nil fontified nil 1228 . 1235) (nil fontified nil 1215 . 1228) (nil fontified nil 1213 . 1215) (nil fontified nil 1203 . 1213) (nil fontified nil 1202 . 1203) (nil fontified nil 1197 . 1202) (nil fontified nil 1169 . 1197) (nil fontified nil 1168 . 1169) (nil fontified nil 1128 . 1168) (nil fontified nil 1127 . 1128) (nil fontified nil 1122 . 1127) (nil fontified nil 1102 . 1122) (nil fontified nil 1101 . 1102) (nil fontified nil 1062 . 1101) (nil fontified nil 981 . 1062) (nil fontified nil 980 . 981) (nil fontified nil 974 . 980) (nil fontified nil 973 . 974) (nil fontified nil 972 . 973) (nil fontified nil 971 . 972) (nil fontified nil 893 . 971) (nil fontified nil 891 . 893) (nil fontified nil 882 . 891) (nil fontified nil 878 . 882) (nil fontified nil 874 . 878) (nil fontified nil 873 . 874) (nil fontified nil 870 . 873) (nil fontified nil 846 . 870) (nil fontified nil 842 . 846) (nil fontified nil 833 . 842) (nil fontified nil 830 . 833) (nil fontified nil 798 . 830) (nil fontified nil 794 . 798) (nil fontified nil 782 . 794) (nil fontified nil 781 . 782) (nil fontified nil 763 . 781) (nil fontified nil 758 . 763) (nil fontified nil 757 . 758) (nil fontified nil 748 . 757) (nil fontified nil 747 . 748) (nil fontified nil 727 . 747) (nil fontified nil 726 . 727) (nil fontified nil 720 . 726) (nil fontified nil 719 . 720) (nil fontified nil 713 . 719) (nil fontified nil 711 . 713) (nil fontified nil 699 . 711) (nil fontified nil 675 . 699) (nil fontified nil 661 . 675) (nil fontified nil 659 . 661) (nil fontified nil 646 . 659) (nil fontified nil 645 . 646) (nil fontified nil 636 . 645) (nil fontified nil 632 . 636) (nil fontified nil 631 . 632) (nil fontified nil 619 . 631) (nil fontified nil 617 . 619) (nil fontified nil 609 . 617) (nil fontified nil 608 . 609) (nil fontified nil 607 . 608) (nil fontified nil 579 . 607) (nil fontified nil 578 . 579) (nil fontified nil 544 . 578) (nil fontified nil 543 . 544) (nil fontified nil 542 . 543) (nil fontified nil 528 . 542) (nil fontified nil 527 . 528) (nil fontified nil 473 . 527) (nil fontified nil 471 . 473) (nil fontified nil 461 . 471) (461 . 1472)) nil (26523 48808 627490 129000) 0 nil])
([nil nil ((1637 . 1649) (#("    " 0 4 (fontified t)) . 1637) (1617 . 1633) (#("        " 0 8 (fontified t)) . 1617) (1494 . 1514) (#("            " 0 12 (fontified t)) . 1494) (1473 . 1489) (#("        " 0 8 (fontified t)) . 1473) (1445 . 1465) (#("            " 0 12 (fontified t)) . 1445) (1368 . 1388) (#("            " 0 12 (fontified t)) . 1368) (1329 . 1345) (#("        " 0 8 (fontified t)) . 1329) (1245 . 1261) (#("        " 0 8 (fontified t)) . 1245) (1170 . 1186) (#("        " 0 8 (fontified t)) . 1170) (983 . 999) (#("        " 0 8 (fontified t)) . 983) (966 . 978) (#("    " 0 4 (fontified t)) . 966) (946 . 962) (#("        " 0 8 (fontified t)) . 946) (923 . 943) (#("            " 0 12 (fontified t)) . 923) (902 . 918) (#("        " 0 8 (fontified t)) . 902) (878 . 898) (#("            " 0 12 (fontified t)) . 878) (851 . 875) (#("                " 0 16 (fontified t)) . 851) (826 . 846) (#("            " 0 12 (fontified t)) . 826) (799 . 823) (#("                " 0 16 (fontified t)) . 799) (727 . 747) (#("            " 0 12 (fontified t)) . 727) (667 . 687) (#("            " 0 12 (fontified t)) . 667) (621 . 637) (#("        " 0 8 (fontified t)) . 621) (548 . 564) (#("        " 0 8 (fontified t)) . 548) (490 . 506) (#("        " 0 8 (fontified t)) . 490) (#("    " 0 4 (fontified t)) . -461) 449) nil (26523 48808 627476 32000) 0 nil])
([nil nil ((#("            else
                # Meta.parse returns the \"extra token...\" like we want, but also in cases like \"\\n\\nx = 1\\n# comment\", so we need to do the multiple expressions check ourselves after all
                parsed1, next_ind1 = Meta.parse(cell.code, 1, raise=false)
                parsed2, next_ind2 = Meta.parse(cell.code, next_ind1, raise=false)

                if parsed2 === nothing
                    # only whitespace or comments after the first expression
                    parsed1
                else
                    Expr(:error, \"extra token after end of expression\\n\\nBoundaries: $(expression_boundaries(cell.code))\")
                end" 0 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 33 (fontified t) 33 35 (face font-lock-comment-delimiter-face fontified t) 35 113 (face font-lock-comment-face fontified t) 113 114 (face font-lock-comment-face syntax-table (1) fontified t) 114 115 (face font-lock-comment-face fontified t) 115 116 (face font-lock-comment-face syntax-table (1) fontified t) 116 122 (face font-lock-comment-face fontified t) 122 123 (face font-lock-comment-face syntax-table (1) fontified t) 123 204 (face font-lock-comment-face fontified t) 204 220 (fontified t) 220 251 (fontified t) 251 252 (face (rainbow-delimiters-depth-1-face) fontified t) 252 272 (fontified t) 272 277 (face font-lock-constant-face fontified t) 277 278 (face (rainbow-delimiters-depth-1-face) fontified t) 278 295 (fontified t) 295 326 (fontified t) 326 327 (face (rainbow-delimiters-depth-1-face) fontified t) 327 355 (fontified t) 355 360 (face font-lock-constant-face fontified t) 360 361 (face (rainbow-delimiters-depth-1-face) fontified t) 361 362 (fontified t) 362 363 (fontified t) 363 379 (fontified t) 379 381 (face font-lock-keyword-face fontified t) 381 394 (fontified t) 394 401 (face font-lock-constant-face fontified t) 401 422 (fontified t) 422 424 (face font-lock-comment-delimiter-face fontified t) 424 479 (face font-lock-comment-face fontified t) 479 499 (fontified t) 499 523 (fontified t) 523 527 (face font-lock-keyword-face fontified t) 527 548 (fontified t) 548 552 (fontified t) 552 553 (face (rainbow-delimiters-depth-1-face) fontified t) 553 559 (face julia-quoted-symbol-face fontified t) 559 561 (fontified t) 561 649 (face font-lock-string-face fontified t) 649 650 (face (rainbow-delimiters-depth-1-face) fontified t) 650 667 (fontified t) 667 670 (face font-lock-keyword-face fontified t)) . 966) (undo-tree-id314 . -670) (undo-tree-id315 . -428) (undo-tree-id316 . -428) (undo-tree-id317 . -428) (undo-tree-id318 . -428) (undo-tree-id319 . -428) (undo-tree-id320 . -650) (undo-tree-id321 . -650) (undo-tree-id322 . -650) (undo-tree-id323 . -650) (undo-tree-id324 . -548) (undo-tree-id325 . -548) (undo-tree-id326 . -670) (undo-tree-id327 . -670) (undo-tree-id328 . -670) (undo-tree-id329 . -650) (undo-tree-id330 . -670) (t 26523 48808 632327 580000)) nil (26523 48821 710082 851000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -965) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) 966) nil (26523 48821 710070 668000) 0 nil])
([nil nil ((#("if can_insert_filename" 0 2 (face font-lock-keyword-face fontified t) 2 22 (fontified t)) . 467) (undo-tree-id331 . -22) (undo-tree-id332 . -22) (undo-tree-id333 . -22) (undo-tree-id334 . -22) (undo-tree-id335 . -22) (t 26523 48821 712584 700000)) nil (26523 48828 472041 246000) 0 nil])
([nil nil ((467 . 470)) nil (26523 48828 472028 371000) 0 nil])
([nil nil ((#("                if Meta.isexpr(ex, :toplevel)
                    # if there is more than one expression:
                    if count(a -> !(a isa LineNumberNode), ex.args) > 1
                        ex
                    else
                        ex
                    end
                else
                    ex
                end" 0 16 (fontified t) 16 18 (face font-lock-keyword-face fontified t) 18 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 35 (fontified t) 35 44 (face julia-quoted-symbol-face fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 66 (fontified t) 66 68 (face font-lock-comment-delimiter-face fontified t) 68 82 (face font-lock-comment-face fontified t) 82 106 (face font-lock-comment-face fontified t) 106 126 (fontified t) 126 128 (face font-lock-keyword-face fontified t) 128 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-1-face) fontified t) 135 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 162 (fontified t) 162 163 (face (rainbow-delimiters-depth-2-face) fontified t) 163 172 (fontified t) 172 173 (face (rainbow-delimiters-depth-1-face) fontified t) 173 202 (fontified t) 202 204 (fontified t) 204 225 (fontified t) 225 229 (face font-lock-keyword-face fontified t) 229 254 (fontified t) 254 277 (fontified t) 277 280 (face font-lock-keyword-face fontified t) 280 297 (fontified t) 297 301 (face font-lock-keyword-face fontified t) 301 322 (fontified t) 322 325 (fontified t) 325 341 (fontified t) 341 344 (face font-lock-keyword-face fontified t)) . 602) (undo-tree-id406 . -344) (undo-tree-id407 . -344) (undo-tree-id408 . -344) (undo-tree-id409 . -344) (undo-tree-id410 . -344) (undo-tree-id411 . -344) (undo-tree-id412 . -344) (undo-tree-id413 . -344) (undo-tree-id414 . -344) (undo-tree-id415 . -344) (undo-tree-id416 . -344) (undo-tree-id417 . -344) (undo-tree-id418 . -344) (t 26523 48828 476050 952000)) nil (26523 48845 343029 971000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -601) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) 602) nil (26523 48845 343024 200000) 0 nil])
([nil nil ((#("            end" 0 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 15 (face font-lock-keyword-face fontified t rear-nonsticky t)) . 602) (undo-tree-id376 . -15) (undo-tree-id377 . -15) (undo-tree-id378 . -15) (undo-tree-id379 . -15) (undo-tree-id380 . -15) (undo-tree-id381 . -15) (undo-tree-id382 . -15) (undo-tree-id383 . -15) (undo-tree-id384 . -15) (undo-tree-id385 . -15) (undo-tree-id386 . -15)) nil (26523 48845 343016 4000) 0 nil])
([nil nil ((#("            raw = let" 0 12 (fontified t) 12 18 (fontified t) 18 21 (face font-lock-keyword-face fontified t)) . 449) (undo-tree-id363 . -21) (undo-tree-id364 . -12) (undo-tree-id365 . -18) (undo-tree-id366 . -18) (undo-tree-id367 . -18) (undo-tree-id368 . -18) (undo-tree-id369 . -21) (undo-tree-id370 . -21) (undo-tree-id371 . -18) (undo-tree-id372 . -21) (undo-tree-id373 . -21) (undo-tree-id374 . -21) (undo-tree-id375 . -21)) nil (26523 48845 343009 943000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -448) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) 449) nil (26523 48845 343002 228000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -515) (#("    " 0 4 (fontified t)) . -461) 449) nil (26523 48845 342978 453000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -571) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 572 (t 26523 48845 343048 997000)) nil (26523 48846 776468 95000) 0 nil])
([nil nil ((#("ex" 0 2 (fontified t)) . -515) (undo-tree-id438 . -2) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) 517 (t 26523 48846 776410 480000)) nil (26523 48848 649063 678000) 0 nil])
([nil nil ((515 . 518)) nil (26523 48848 649046 325000) 0 nil])
([nil nil ((#("removed" 0 7 (face font-lock-comment-face fontified t)) . 373) (undo-tree-id464 . -7) (undo-tree-id465 . -7) (undo-tree-id466 . -7) (t 26523 48848 649780 603000)) nil (26523 48878 329779 111000) 0 nil])
([nil nil ((373 . 386)) nil (26523 48878 329776 266000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . -385) (undo-tree-id463 . -1) 386) nil (26523 48878 329775 434000) 0 nil])
([nil nil ((385 . 389)) nil (26523 48878 329774 332000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-comment-face fontified t)) . -387) (undo-tree-id461 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -388) (undo-tree-id462 . -1) 389) nil (26523 48878 329773 671000) 0 nil])
([nil nil ((387 . 393)) nil (26523 48878 329772 438000) 0 nil])
([nil nil ((393 . 410)) nil (26523 48878 329771 957000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -409) (undo-tree-id460 . -1) 410) nil (26523 48878 329771 437000) 0 nil])
([nil nil ((409 . 418)) nil (26523 48878 329770 445000) 0 nil])
([nil nil ((418 . 420)) nil (26523 48878 329770 64000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -418) (undo-tree-id458 . -1) (#("x" 0 1 (fontified t)) . -419) (undo-tree-id459 . -1) 420) nil (26523 48878 329769 443000) 0 nil])
([nil nil ((418 . 421)) nil (26523 48878 329768 110000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-comment-face fontified t)) . -420) (undo-tree-id457 . -1) 421) nil (26523 48878 329767 629000) 0 nil])
([nil nil ((420 . 441)) nil (26523 48878 329766 698000) 0 nil])
([nil nil ((441 . 446)) nil (26523 48878 329766 337000) 0 nil])
([nil nil ((#("multip" 0 6 (face font-lock-comment-face fontified t)) . 440) (undo-tree-id456 . -6) 446) nil (26523 48878 329765 856000) 0 nil])
([nil nil ((#("contains " 0 9 (face font-lock-comment-face fontified t)) . 431) (undo-tree-id453 . -9) (undo-tree-id454 . -9) (undo-tree-id455 . -9) 440) nil (26523 48878 329764 734000) 0 nil])
([nil nil ((#("expression " 0 11 (face font-lock-comment-face fontified t)) . 420) (undo-tree-id450 . -11) (undo-tree-id451 . -11) (undo-tree-id452 . -11) 431) nil (26523 48878 329762 379000) 0 nil])
([nil nil ((420 . 421)) nil (26523 48878 329760 345000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-comment-face fontified t)) . -420) (undo-tree-id449 . -1) 421) nil (26523 48878 329759 744000) 0 nil])
([nil nil ((420 . 441)) nil (26523 48878 329758 332000) 0 nil])
([nil nil ((441 . 449)) nil (26523 48878 329757 660000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-comment-face fontified t)) . -408) (undo-tree-id448 . -1) 409) nil (26523 48878 329756 198000) 0 nil])
([nil current ((408 . 413)) nil (26523 48878 329745 287000) 0 nil])
nil
